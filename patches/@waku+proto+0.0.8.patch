diff --git a/node_modules/@waku/proto/dist/generated/filter.js b/node_modules/@waku/proto/dist/generated/filter.js
index 8afdb4e..0f22805 100644
--- a/node_modules/@waku/proto/dist/generated/filter.js
+++ b/node_modules/@waku/proto/dist/generated/filter.js
@@ -3,7 +3,7 @@
 /* eslint-disable @typescript-eslint/no-namespace */
 /* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
 /* eslint-disable @typescript-eslint/no-empty-interface */
-import { decodeMessage, encodeMessage, MaxLengthError, message } from 'protons-runtime';
+import { decodeMessage, encodeMessage, message } from 'protons-runtime';
 import { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc';
 export var FilterRequest;
 (function (FilterRequest) {
@@ -97,7 +97,7 @@ export var FilterRequest;
                         }
                         case 3: {
                             if (opts.limits?.contentFilters != null && obj.contentFilters.length === opts.limits.contentFilters) {
-                                throw new MaxLengthError('Decode error - map field "contentFilters" had too many elements');
+                                throw new Error('Decode error - map field "contentFilters" had too many elements');
                             }
                             obj.contentFilters.push(FilterRequest.ContentFilter.codec().decode(reader, reader.uint32(), {
                                 limits: opts.limits?.contentFilters$
@@ -150,7 +150,7 @@ export var MessagePush;
                     switch (tag >>> 3) {
                         case 1: {
                             if (opts.limits?.messages != null && obj.messages.length === opts.limits.messages) {
-                                throw new MaxLengthError('Decode error - map field "messages" had too many elements');
+                                throw new Error('Decode error - map field "messages" had too many elements');
                             }
                             obj.messages.push(WakuMessage.codec().decode(reader, reader.uint32(), {
                                 limits: opts.limits?.messages$
diff --git a/node_modules/@waku/proto/dist/generated/filter_v2.js b/node_modules/@waku/proto/dist/generated/filter_v2.js
index b293b9d..f6ca418 100644
--- a/node_modules/@waku/proto/dist/generated/filter_v2.js
+++ b/node_modules/@waku/proto/dist/generated/filter_v2.js
@@ -3,7 +3,7 @@
 /* eslint-disable @typescript-eslint/no-namespace */
 /* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
 /* eslint-disable @typescript-eslint/no-empty-interface */
-import { decodeMessage, encodeMessage, enumeration, MaxLengthError, message } from 'protons-runtime';
+import { decodeMessage, encodeMessage, enumeration, message } from 'protons-runtime';
 import { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc';
 export var FilterSubscribeRequest;
 (function (FilterSubscribeRequest) {
@@ -78,7 +78,7 @@ export var FilterSubscribeRequest;
                         }
                         case 11: {
                             if (opts.limits?.contentTopics != null && obj.contentTopics.length === opts.limits.contentTopics) {
-                                throw new MaxLengthError('Decode error - map field "contentTopics" had too many elements');
+                                throw new Error('Decode error - map field "contentTopics" had too many elements');
                             }
                             obj.contentTopics.push(reader.string());
                             break;
diff --git a/node_modules/@waku/proto/dist/generated/metadata.js b/node_modules/@waku/proto/dist/generated/metadata.js
index 15a8c5d..ec3421a 100644
--- a/node_modules/@waku/proto/dist/generated/metadata.js
+++ b/node_modules/@waku/proto/dist/generated/metadata.js
@@ -3,7 +3,7 @@
 /* eslint-disable @typescript-eslint/no-namespace */
 /* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
 /* eslint-disable @typescript-eslint/no-empty-interface */
-import { decodeMessage, encodeMessage, MaxLengthError, message } from 'protons-runtime';
+import { decodeMessage, encodeMessage, message } from 'protons-runtime';
 export var WakuMetadataRequest;
 (function (WakuMetadataRequest) {
     let _codec;
@@ -40,7 +40,7 @@ export var WakuMetadataRequest;
                         }
                         case 2: {
                             if (opts.limits?.shards != null && obj.shards.length === opts.limits.shards) {
-                                throw new MaxLengthError('Decode error - map field "shards" had too many elements');
+                                throw new Error('Decode error - map field "shards" had too many elements');
                             }
                             obj.shards.push(reader.uint32());
                             break;
@@ -99,7 +99,7 @@ export var WakuMetadataResponse;
                         }
                         case 2: {
                             if (opts.limits?.shards != null && obj.shards.length === opts.limits.shards) {
-                                throw new MaxLengthError('Decode error - map field "shards" had too many elements');
+                                throw new Error('Decode error - map field "shards" had too many elements');
                             }
                             obj.shards.push(reader.uint32());
                             break;
diff --git a/node_modules/@waku/proto/dist/generated/peer_exchange.js b/node_modules/@waku/proto/dist/generated/peer_exchange.js
index 6ca5efa..f3f8362 100644
--- a/node_modules/@waku/proto/dist/generated/peer_exchange.js
+++ b/node_modules/@waku/proto/dist/generated/peer_exchange.js
@@ -3,7 +3,7 @@
 /* eslint-disable @typescript-eslint/no-namespace */
 /* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
 /* eslint-disable @typescript-eslint/no-empty-interface */
-import { decodeMessage, encodeMessage, MaxLengthError, message } from 'protons-runtime';
+import { decodeMessage, encodeMessage, message } from 'protons-runtime';
 export var PeerInfo;
 (function (PeerInfo) {
     let _codec;
@@ -120,7 +120,7 @@ export var PeerExchangeResponse;
                     switch (tag >>> 3) {
                         case 1: {
                             if (opts.limits?.peerInfos != null && obj.peerInfos.length === opts.limits.peerInfos) {
-                                throw new MaxLengthError('Decode error - map field "peerInfos" had too many elements');
+                                throw new Error('Decode error - map field "peerInfos" had too many elements');
                             }
                             obj.peerInfos.push(PeerInfo.codec().decode(reader, reader.uint32(), {
                                 limits: opts.limits?.peerInfos$
diff --git a/node_modules/@waku/proto/dist/generated/store_v3.js b/node_modules/@waku/proto/dist/generated/store_v3.js
index f1fcd61..54228b4 100644
--- a/node_modules/@waku/proto/dist/generated/store_v3.js
+++ b/node_modules/@waku/proto/dist/generated/store_v3.js
@@ -3,7 +3,7 @@
 /* eslint-disable @typescript-eslint/no-namespace */
 /* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
 /* eslint-disable @typescript-eslint/no-empty-interface */
-import { decodeMessage, encodeMessage, MaxLengthError, message } from 'protons-runtime';
+import { decodeMessage, encodeMessage, message } from 'protons-runtime';
 import { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc';
 export var WakuMessageKeyValue;
 (function (WakuMessageKeyValue) {
@@ -149,7 +149,7 @@ export var StoreQueryRequest;
                         }
                         case 11: {
                             if (opts.limits?.contentTopics != null && obj.contentTopics.length === opts.limits.contentTopics) {
-                                throw new MaxLengthError('Decode error - map field "contentTopics" had too many elements');
+                                throw new Error('Decode error - map field "contentTopics" had too many elements');
                             }
                             obj.contentTopics.push(reader.string());
                             break;
@@ -164,7 +164,7 @@ export var StoreQueryRequest;
                         }
                         case 20: {
                             if (opts.limits?.messageHashes != null && obj.messageHashes.length === opts.limits.messageHashes) {
-                                throw new MaxLengthError('Decode error - map field "messageHashes" had too many elements');
+                                throw new Error('Decode error - map field "messageHashes" had too many elements');
                             }
                             obj.messageHashes.push(reader.bytes());
                             break;
@@ -256,7 +256,7 @@ export var StoreQueryResponse;
                         }
                         case 20: {
                             if (opts.limits?.messages != null && obj.messages.length === opts.limits.messages) {
-                                throw new MaxLengthError('Decode error - map field "messages" had too many elements');
+                                throw new Error('Decode error - map field "messages" had too many elements');
                             }
                             obj.messages.push(WakuMessageKeyValue.codec().decode(reader, reader.uint32(), {
                                 limits: opts.limits?.messages$